// Problem 1
// Link: https://projecteuler.net/problem=1
// Content: If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

const sumMultiplesOf3Or5 = (n) => {
  if (n < 3) return 0;
  let sum = 0;
  return n % 3 === 0 || n % 5 === 0
    ? (sum += n + sumMultiplesOf3Or5(n - 1))
    : (sum += sumMultiplesOf3Or5(n - 1));
};

console.log("\nProblem 1:");
console.log(sumMultiplesOf3Or5(999), "// Expect 233168");

// Problem 2
// Link: https://projecteuler.net/problem=2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

const sumEvenFibonacci = (max, sum, n1, n2) => {
  if ((n1 + n2) % 2 === 0) {
    if (n1 + n2 > max) return sum;
    return sumEvenFibonacci(max, sum + n1 + n2, n1 + n2, n1);
  }

  return sumEvenFibonacci(max, sum, n1 + n2, n1);
};

console.log("\nProblem 2:");
console.log(sumEvenFibonacci(4000000, 0, 1, 0), "// Expect 4613732");

// Problem 3
// Link: https://projecteuler.net/problem=3
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

const isPrime = (n, i = 2) => {
  if (i > n / 2) return true;
  return n % i === 0 ? false : isPrime(n, (i += 1));
};

const isPrimeLoop = (n) => {
  let i = 2;
  while (i <= n / 2) {
    if (n % i === 0) return false;
    i++;
  }

  return true;
};

const largestPrimeFactorRec = (n) => {
  for (let i = Math.round(n / 2); i > 2; i--) {
    if (n % i === 0 && isPrimeLoop(i)) return i;
  }
  return 1;
};

const largestPrimeFactorLoop = (n) => {
  const factorArr = [];
  for (let i = 2; i <= n / 2; i++) {
    if (isPrime(i) && n % i === 0) {
      factorArr.push(i);
      n = n / i;
      i = 2;
    }
  }
  if (n !== 1) factorArr.push(n);
  return factorArr[factorArr.length - 1];
};

const largestPrimeFactorRecOpt = (n, i) => {
  if (i > n / 2 && n !== 1) return n;
  return n % i === 0 && isPrime(i)
    ? largestPrimeFactorRecOpt(n / i, (i = 2))
    : largestPrimeFactorRecOpt(n, (i += 1));
};

console.log("\nProblem 3:");
// console.log(largestPrimeFactorLoop(600851475143), "// Expect [ 71, 839, 1471, 6857 ]");
console.log(largestPrimeFactorRecOpt(600851475143, 2), "// Expect [ 71, 839, 1471, 6857 ]");

// Problem 4
// Link: https://projecteuler.net/problem=4
// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

const reverseNumber = (n, temp) => {
  if (n <= 0) return temp;

  temp = temp * 10 + (n % 10);
  return reverseNumber(Math.floor(n / 10), temp);
};

const isPalindrome = (n) => {
  if (n === reverseNumber(n, 0)) return true;
  return false;
};

const findFirstDivisorRev = (n, i) => {
  if (i > n / 2) return n;
  return n % i === 0 ? i : findFirstDivisor(n, (i += 1));
};

const findFirstDivisorLoop = (n, min) => {
  for (let i = min; i < n; i++) {
    if (n % i == 0) return i;
  }
  return n;
};

const is3DigitNumbers = (n, i) => {
  if (n <= 0 || i <= 0) return n === 0 && i === 0 ? true : false;
  return is3DigitNumbers(Math.floor(n / 10), --i);
};

const isProductOfTwo3DigitNumbers = (n) => {
  let i = 100;
  while (i <= n / 2 && is3DigitNumbers(i, 3)) {
    const firstDivisor = findFirstDivisorLoop(n, i);
    if (is3DigitNumbers(firstDivisor, 3) && is3DigitNumbers(n / firstDivisor, 3)) return true;
    i = firstDivisor + 1;
  }

  return false;
};

const findLargestPalindrome = (n, min) => {
  for (let i = n; i >= min; i--) {
    if (isPalindrome(i) && isProductOfTwo3DigitNumbers(i)) return i;
  }
  return false;
};

console.log("\nProblem 4:");
console.log(findLargestPalindrome(999 * 999, 100 * 100));

// Problem 5
// Link: https://projecteuler.net/problem=5
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

const canBeDivided = (n, i) => {
  if (i === 1) return true;
  return n % i === 0 ? canBeDivided(n, --i) : false;
};

const findSmallestNumberEvenlyDivisibleRec = (n, i, count) => {
  if (count >= 5000) return "Too Large!";
  return canBeDivided(n, i) ? n : findSmallestNumberEvenlyDivisibleRec((n += i), i, ++count);
};

const findSmallestNumberEvenlyDivisibleLoop = (n, i) => {
  while (true) {
    if (canBeDivided(n, i)) return n;
    n += i;
  }
};

console.log("\nProblem 5:");
console.log(findSmallestNumberEvenlyDivisibleLoop(20, 20, 0));
